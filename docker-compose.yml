# docker-compose.yml
version: '3.10'

services:
  web:
    build: .
    # Command to start your FastAPI application
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --workers 1
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq: # Add dependency on RabbitMQ
        condition: service_healthy
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq # Add RabbitMQ host
      - RABBITMQ_PORT=5672     # Add RabbitMQ port

  ai_worker:
    build: .
    # Command to start your AI worker script
    command: python ai_worker.py
    volumes:
      - .:/app
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq: # Add dependency on RabbitMQ
        condition: service_healthy
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq # Add RabbitMQ host
      - RABBITMQ_PORT=5672     # Add RabbitMQ port

  redis:
    image: "redis:7-alpine"
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: 1s
      timeout: 3s
      retries: 5

  rabbitmq: # New RabbitMQ service
    image: "rabbitmq:3-management-alpine" # Use RabbitMQ with management plugin for easier debugging
    ports:
      - "5672:5672" # Standard AMQP port
      - "15672:15672" # Management UI port
    healthcheck: # Healthcheck for RabbitMQ
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
